"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ backend3: —á–∏—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã backend2 –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
"""
import asyncio
import base64
import io
import os
import json
import logging
import time
from typing import Optional, Dict, List

import aio_pika
import httpx
from aio_pika import Message, DeliveryMode
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from pydantic import BaseModel
from PIL import Image

from .core.config import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Backend 3 - Image Describer", version="1.0.0")

# Endpoint NVIDIA Integrate API
NVIDIA_INTEGRATE_URL = "https://integrate.api.nvidia.com/v1/chat/completions"


class ImageAnalysisRequest(BaseModel):
    image_url: Optional[str] = None
    text_prompt: str = ""
    max_tokens: int = 1024
    temperature: float = 0.9


class ImageAnalysisResponse(BaseModel):
    success: bool
    result: str
    error: Optional[str] = None

def check_confidence_threshold(description: str, threshold: int = 20) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç overall_confidence –≤ JSON –æ—Ç–≤–µ—Ç–µ –æ—Ç VLM
    
    Args:
        description: JSON —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç VLM
        threshold: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
        
    Returns:
        bool: True –µ—Å–ª–∏ overall_confidence > threshold, False –∏–Ω–∞—á–µ
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        data = json.loads(description)
        
        # –ò—â–µ–º overall_confidence –≤ data_quality
        if "data_quality" in data and "overall_confidence" in data["data_quality"]:
            confidence = data["data_quality"]["overall_confidence"]
            return confidence > threshold
        
        # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç (—Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ—Ç)
        logger.warning("–ü–æ–ª–µ overall_confidence –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ VLM")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        
    except json.JSONDecodeError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç –æ—Ç VLM")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ confidence: {e}")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ


def get_prompt_text() -> str:
    a = '''–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø
–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –í–ê–õ–ò–î–ù–´–ô JSON —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ö–µ–º–µ –Ω–∏–∂–µ.
–ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Ñ–∏–≥—É—Ä–Ω–æ–π —Å–∫–æ–±–∫–æ–π.

–†–û–õ–¨
–¢—ã ‚Äî –¥–µ–Ω–¥—Ä–æ–ª–æ–≥. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (crop –æ–¥–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏–ª–∏ –∫—É—Å—Ç–∞).

–ó–ê–î–ê–ß–ò
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: tree | bush | unknown.
2. –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ—Ä–æ–¥—É (–¢–û–õ–¨–ö–û –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –Ω–∏–∂–µ; –∏–Ω–∞—á–µ "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ").
3. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å—Ç–≤–æ–ª, –∫—Ä–æ–Ω–∞, –∫–æ—Ä–∞, –≥—Ä–∏–±–Ω—ã–µ —Ç–µ–ª–∞, –±–æ–ª–µ–∑–Ω–∏, –≤—Ä–µ–¥–∏—Ç–µ–ª–∏).
4. –û–ø—Ä–µ–¥–µ–ª–∏ —Å–µ–∑–æ–Ω –ø–æ –∫–∞–¥—Ä—É (spring | summer | autumn | winter | unknown).
5. –£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (low | medium | high | critical).
6. –í—Å–µ confidence/likelihood ‚Äî —Ü–µ–ª—ã–µ 0‚Äì100.

–°–ü–ï–¶–†–ï–ñ–ò–ú: –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–µ –¥–µ—Ä–µ–≤–æ –∏ –Ω–µ –∫—É—Å—Ç, –∏–º–µ–µ–Ω–Ω–æ –ø–æ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ –∏ –∏–º–µ–µ–Ω–Ω–æ –Ω–µ –¥–µ—Ä–µ–≤–æ –∏ –Ω–µ –∫—É—Å—Ç,
–¢–û:
‚Äî data_quality.overall_confidence = 0

–°–ü–†–ê–í–û–ß–ù–ò–ö
–ü–æ—Ä–æ–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤ (type=tree): –ö–ª—ë–Ω –æ—Å—Ç—Ä–æ–ª–∏—Å—Ç–Ω—ã–π; –ö–ª—ë–Ω —è—Å–µ–Ω–µ–ª–∏—Å—Ç–Ω—ã–π; –õ–∏–ø–∞; –ë–µ—Ä—ë–∑–∞; –ö–∞—à—Ç–∞–Ω; –î—É–±; –Ø—Å–µ–Ω—å; –í—è–∑; –û—Å–∏–Ω–∞; –ò–≤–∞; –°–æ—Å–Ω–∞; –ï–ª—å; –õ–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞; –¢—É—è; –†—è–±–∏–Ω–∞.
–ü–æ—Ä–æ–¥—ã –∫—É—Å—Ç–æ–≤ (type=bush): –°–æ—Å–Ω–∞ (–∫—É—Å—Ç–∞—Ä–Ω–∏–∫–æ–≤–∞—è —Ñ–æ—Ä–º–∞); –ú–æ–∂–∂–µ–≤–µ–ª—å–Ω–∏–∫; –õ–∞–ø—á–∞—Ç–∫–∞ –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–æ–≤–∞—è (–∫—É—Ä–∏–ª—å—Å–∫–∏–π —á–∞–π); –ß—É–±—É—à–Ω–∏–∫; –°–∏—Ä–µ–Ω—å –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è; –ö–∞—Ä–∞–≥–∞–Ω–∞ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è; –ü—É–∑—ã—Ä–µ–ø–ª–æ–¥–Ω–∏–∫ –∫–∞–ª–∏–Ω–æ–ª–∏—Å—Ç–Ω—ã–π; –°–ø–∏—Ä–µ—è; –ö–∏–∑–∏–ª—å–Ω–∏–∫; –î–µ—Ä–µ–Ω –±–µ–ª—ã–π; –õ–µ—â–∏–Ω–∞; –ë–æ—è—Ä—ã—à–Ω–∏–∫; –†–æ–∑–∞ —Å–æ–±–∞—á—å—è (—à–∏–ø–æ–≤–Ω–∏–∫); –†–æ–∑–∞ –º–æ—Ä—â–∏–Ω–∏—Å—Ç–∞—è.
–ë–æ–ª–µ–∑–Ω–∏/–≤—Ä–µ–¥–∏—Ç–µ–ª–∏/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –º—É—á–Ω–∏—Å—Ç–∞—è —Ä–æ—Å–∞; —á—ë—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Å—Ç–æ—Å—Ç—å –∫–ª—ë–Ω–∞ (Rhytisma spp.); –∞–Ω—Ç—Ä–∞–∫–Ω–æ–∑; —Ä–∂–∞–≤—á–∏–Ω–∞; —Ö–ª–æ—Ä–æ–∑/–¥–µ—Ñ–∏—Ü–∏—Ç –ø–∏—Ç–∞–Ω–∏—è; —Å–∞–∂–∏—Å—Ç—ã–π –Ω–∞–ª—ë—Ç (–≤—Ç–æ—Ä–∏—á–Ω—ã–π –ø—Ä–∏ —Ç–ª—è—Ö/—â–∏—Ç–æ–≤–∫–∞—Ö);
–ª–∏—Å—Ç–æ–≤–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ (Cameraria ohridella, –¥—Ä. –º–∏–Ω—ë—Ä—ã); –∫–∞–Ω–∫–µ—Ä—ã/—è–∑–≤—ã (Nectria, Cytospora –∏ –¥—Ä.); —Å–æ–∫–æ—Ç–µ—á–µ–Ω–∏–µ/slime-flux; –≥–Ω–∏–ª–∏ —Ç—Ä—É—Ç–æ–≤–∏–∫–æ–≤ (Fomes fomentarius, Laetiporus sulphureus –∏ –¥—Ä.);
Armillaria; Phytophthora; –¥—Ä–µ–≤–æ—Ç–æ—á—Ü—ã; –∫–æ–º–ª–µ–≤–∞—è –≥–Ω–∏–ª—å; —Å—Ç–≤–æ–ª–æ–≤–∞—è –≥–Ω–∏–ª—å; —Å—É—Ö–æ–±–æ—á–∏–Ω–∞; –¥—É–ø–ª–æ; –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è; –æ—Ç—Å–ª–æ–µ–Ω–∏–µ –∫–æ—Ä—ã; —Å—É—Ö–æ—Å—Ç–æ–π; —Å—É—Ö–∏–µ –≤–µ—Ç–≤–∏; —Ä–∞–∫; –ø–µ–Ω—ë–∫/–æ—Å—Ç–æ–ª–æ–ø; —Ç—Ä–µ—â–∏–Ω—ã; –≤—ã–≤–∞–ª –∫–æ—Ä–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã; —Å—É—Ö–æ–≤–µ—Ä—à–∏–Ω–Ω–æ—Å—Ç—å.

–ü–†–ê–í–ò–õ–ê
- species.label_ru –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –∏–ª–∏ "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ".
- diseases[].name_ru –∏ pests[].name_ru —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.
- –ï—Å–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ —Ä–∞–∑–ª–∏—á–∏–º ‚Üí present=false –∏ confidence=10‚Äì20.
- dry_branches_pct = 0 / 25 / 50 / 75.
- evidence/locations: –∫–æ—Ä–æ—Ç–∫–æ –ø–æ —Ñ–∞–∫—Ç—É (¬´–ø–ª–æ–¥–æ–≤–æ–µ —Ç–µ–ª–æ —Ç—Ä—É—Ç–æ–≤–∏–∫–∞ —É –æ—Å–Ω–æ–≤–∞–Ω–∏—è¬ª, ¬´–≥–ª—É–±–æ–∫–∞—è —Ç—Ä–µ—â–∏–Ω–∞¬ª).
- risk.level –≤—ã–±–∏—Ä–∞–π –∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (–Ω–∞–∫–ª–æ–Ω, –ø–ª–æ–¥–æ–≤—ã–µ —Ç–µ–ª–∞, —Ç—Ä–µ—â–∏–Ω—ã, —Å—É—Ö–∏–µ –≤–µ—Ç–≤–∏ –∏ —Ç.–ø.).
‚Äî –í—Å—ë –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–°–•–ï–ú–ê JSON (–∑–∞–ø–æ–ª–Ω—è–π —Ä–æ–≤–Ω–æ –ø–æ –æ–±—Ä–∞–∑—Ü—É)
{
  "scene": {
    "season_inferred": "spring|summer|autumn|winter|unknown",
    "note": ""
  },
  "object": {
    "type": "tree|bush|unknown",
    "species": { "label_ru": "...", "confidence": 0 },
    "condition": {
      "trunk_decay":     { "present": false, "evidence": [], "confidence": 0 },
      "cavities":        { "present": false, "locations": [], "confidence": 0 },
      "cracks":          { "present": false, "locations": [], "confidence": 0 },
      "bark_detachment": { "present": false, "locations": [], "confidence": 0 },
      "trunk_damage":    { "present": false, "evidence": [], "confidence": 0 },
      "crown_damage":    { "present": false, "evidence": [], "confidence": 0 },
      "fruiting_bodies": { "present": false, "evidence": [], "confidence": 0 },
      "root_damage": { "present": false, "evidence": [], "confidence": 0 },
      "root_collar_decay": { "present": false, "evidence": [], "confidence": 0 },
      "tree_status": "alive|dying|dead|unknown",
      "leaning": { "present": false, "angle": 0, "confidence": 0 },
      "diseases": [
        {
          "name_ru": "...",
          "type": "fungal|bacterial|viral|physiological",
          "likelihood": 0,
          "evidence": [],
          "severity": "low|medium|high"
        }
      ],
      "pests": [
        { "name_ru": "...", "likelihood": 0, "evidence": [] }
      ],
      "dry_branches_pct": 0,
      "other": []
    },
    "risk": {
      "level": "low|medium|high|critical",
      "drivers": [],
      "imminent_failure_risk": false
    }
  },
  "data_quality": {
    "issues": [],
    "overall_confidence": 0
  }
}

(–í —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –≤—ã–≤–æ–¥–∏ –¢–û–õ–¨–ö–û JSON –ø–æ —Å—Ö–µ–º–µ; –±–µ–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.)'''
    return a

async def start_consumer() -> None:
    connection: aio_pika.abc.AbstractRobustConnection = await aio_pika.connect_robust(settings.rabbitmq_url)
    channel = await connection.channel()
    await channel.set_qos(prefetch_count=10)

    queue = await channel.declare_queue(settings.rabbitmq_queue_image_results, durable=True)

    async with queue.iterator() as queue_iter:
        async for message in queue_iter:
            async with message.process():
                try:
                    start_time = time.time()
                    payload = json.loads(message.body.decode("utf-8"))
                    image_id = payload.get("image_id")
                    image_url = payload.get("image_url")
                    detected_objects = payload.get("detected_objects", [])

                    logger.info(f"üì• Backend3: –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ image_id={image_id}, –æ–±—ä–µ–∫—Ç–æ–≤: {len(detected_objects)}")

                    if not image_url:
                        logger.error(f"‚ùå –ù–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è image_id={image_id}")
                        continue

                    if not detected_objects:
                        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
                        result_text = await call_nvidia_api_by_url(image_url)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º overall_confidence
                        should_include = check_confidence_threshold(result_text)
                        
                        if should_include:
                            result = {
                                "image_id": image_id,
                                "detected_objects": [
                                    {
                                        "bbox": [],
                                        "label": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º",
                                        "confidence": 1.0,
                                        "fragment_url": image_url,
                                        "description": result_text,
                                    }
                                ],
                            }
                        else:
                            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
                            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º –¥–ª—è image_id={image_id} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ low confidence (<=20%)")
                            result = {
                                "image_id": image_id,
                                "detected_objects": [],
                            }
                    else:
                        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –û–î–ò–ù –†–ê–ó –¥–ª—è –≤—Å–µ—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
                        download_start = time.time()
                        logger.info(f"   üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ S3...")
                        
                        try:
                            async with httpx.AsyncClient(timeout=60.0) as client:
                                resp = await client.get(image_url)
                                resp.raise_for_status()
                                image_data = resp.content
                                img = Image.open(io.BytesIO(image_data)).convert("RGB")
                                
                            download_time = time.time() - download_start
                            size_mb = len(image_data) / (1024 * 1024)
                            logger.info(f"   ‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {size_mb:.2f} MB –∑–∞ {download_time:.2f}s")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                            continue
                        
                        # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ asyncio.gather()
                        logger.info(f"   üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É {len(detected_objects)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤...")
                        
                        # –°–æ–∑–¥–∞—ë–º –û–ë–©–ò–ô httpx –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                        async with httpx.AsyncClient(timeout=120.0, limits=httpx.Limits(max_connections=20, max_keepalive_connections=20)) as shared_client:
                            
                            async def process_single_fragment(i: int, obj: dict, img_pil: Image.Image, client: httpx.AsyncClient) -> Optional[dict]:
                                """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç: –æ–±—Ä–µ–∑–∫–∞, –∞–Ω–∞–ª–∏–∑ VLM, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
                                try:
                                    fragment_start = time.time()
                                    bbox = obj.get("bbox", [])  # [x1, y1, x2, y2]
                                    label = obj.get("label", "–æ–±—ä–µ–∫—Ç")
                                    confidence = obj.get("confidence", 0.0)
                                    
                                    logger.info(f"      üîç [{i+1}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (label={label}, conf={confidence:.2f})")
                                    
                                    if len(bbox) != 4:
                                        return None
                                    
                                    # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏!)
                                    x1, y1, x2, y2 = bbox
                                    cropped_img = img_pil.crop((int(x1), int(y1), int(x2), int(y2)))
                                    
                                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                                    buffer = io.BytesIO()
                                    cropped_img.save(buffer, format='JPEG', quality=95)
                                    cropped_image_b64 = base64.b64encode(buffer.getvalue()).decode()
                                    
                                    crop_time = time.time() - fragment_start
                                    logger.info(f"         ‚úì [{i+1}] –û–±—Ä–µ–∑–∫–∞: {crop_time:.2f}s")
                                    
                                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —á–µ—Ä–µ–∑ NVIDIA API (–†–ï–ê–õ–¨–ù–û –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–±—â–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º!)
                                    api_start = time.time()
                                    fragment_description = await call_nvidia_api_with_base64_shared(cropped_image_b64, client)
                                    api_time = time.time() - api_start
                                    logger.info(f"         ‚úì [{i+1}] NVIDIA VLM API: {api_time:.2f}s")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º overall_confidence
                                    should_include = check_confidence_threshold(fragment_description)
                                    
                                    if not should_include:
                                        logger.info(f"         ‚ö†Ô∏è [{i+1}] –§–∏–ª—å—Ç—Ä: low confidence (<=20%)")
                                        return None
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3 (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!)
                                    save_start = time.time()
                                    fragment_url = await save_cropped_image_shared(cropped_image_b64, image_id, i, label, client)
                                    save_time = time.time() - save_start
                                    logger.info(f"         ‚úì [{i+1}] S3 save: {save_time:.2f}s")
                                    
                                    fragment_time = time.time() - fragment_start
                                    logger.info(f"      ‚úÖ [{i+1}] –ì–û–¢–û–í–û –∑–∞ {fragment_time:.2f}s")
                                    
                                    return {
                                        "bbox": bbox,
                                        "label": label,
                                        "confidence": confidence,
                                        "fragment_url": fragment_url,
                                        "description": fragment_description
                                    }
                                    
                                except Exception as e:
                                    logger.error(f"         ‚ùå [{i+1}] –û—à–∏–±–∫–∞: {e}")
                                    return None
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –í–°–ï —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –†–ï–ê–õ–¨–ù–û –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å –æ–±—â–∏–º HTTP –∫–ª–∏–µ–Ω—Ç–æ–º
                            parallel_start = time.time()
                            tasks = [
                                process_single_fragment(i, obj, img, shared_client) 
                                for i, obj in enumerate(detected_objects)
                            ]
                            results = await asyncio.gather(*tasks, return_exceptions=True)
                            parallel_time = time.time() - parallel_start
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        processed_objects = [r for r in results if r is not None and not isinstance(r, Exception)]
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                        result = {
                            "image_id": image_id,
                            "detected_objects": processed_objects
                        }
                        
                        logger.info(f"   ‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {len(processed_objects)}/{len(detected_objects)} –∑–∞ {parallel_time:.2f}s")

                    await channel.default_exchange.publish(
                        Message(
                            json.dumps(result).encode("utf-8"),
                            content_type="application/json",
                            delivery_mode=DeliveryMode.PERSISTENT,
                        ),
                        routing_key=settings.rabbitmq_queue_image_descriptions,
                    )
                    
                    total_time = time.time() - start_time
                    obj_count = len(result.get("detected_objects", []))
                    logger.info(f"‚úÖ Backend3: –û–±—Ä–∞–±–æ—Ç–∫–∞ image_id={image_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f}s (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {obj_count} –æ–±—ä–µ–∫—Ç–æ–≤)")
                    
                except Exception as e:
                    logger.exception(f"‚ùå Backend3: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ image_id={image_id}: %s", e)


@app.on_event("startup")
async def on_startup():
    asyncio.create_task(start_consumer())


@app.get("/health")
async def health():
    return {"status": "ok"}


async def crop_image_from_url(image_url: str, bbox: list) -> Optional[str]:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64
    
    Args:
        image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        bbox: [x1, y1, x2, y2] –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
        
    Returns:
        Optional[str]: base64 –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        async with httpx.AsyncClient(timeout=90.0) as client:
            resp = await client.get(image_url)
            resp.raise_for_status()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(io.BytesIO(resp.content)).convert("RGB")
            
            # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º [x1, y1, x2, y2]
            x1, y1, x2, y2 = bbox
            cropped_img = img.crop((int(x1), int(y1), int(x2), int(y2)))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            buffer = io.BytesIO()
            cropped_img.save(buffer, format='JPEG', quality=95)
            img_b64 = base64.b64encode(buffer.getvalue()).decode()
            
            return img_b64
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


async def call_nvidia_api_with_base64_shared(image_b64: str, client: httpx.AsyncClient) -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç NVIDIA API —Å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â–∏–π HTTP –∫–ª–∏–µ–Ω—Ç
    
    Args:
        image_b64: base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        client: –û–±—â–∏–π httpx.AsyncClient –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
    Returns:
        str: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        prompt_text = get_prompt_text()
        headers = {
            "Authorization": f"Bearer {settings.nvidia_api_key}" if settings.nvidia_api_key else "",
            "Accept": "application/json",
        }
        payload = {
            "model": "meta/llama-3.2-90b-vision-instruct",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt_text},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_b64}"}},
                    ],
                }
            ],
            "max_tokens": 512,
            "temperature": 1.0,
            "top_p": 1.0,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0,
            "stream": False,
        }
        
        resp = await client.post(NVIDIA_INTEGRATE_URL, headers=headers, json=payload)
        resp.raise_for_status()
        data = resp.json()
        if "choices" in data and data["choices"]:
            return data["choices"][0]["message"]["content"]
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ NVIDIA API: {e}")
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"


async def call_nvidia_api_with_base64(image_b64: str) -> str:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç NVIDIA API —Å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (legacy –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        image_b64: base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        str: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        prompt_text = get_prompt_text()
        headers = {
            "Authorization": f"Bearer {settings.nvidia_api_key}" if settings.nvidia_api_key else "",
            "Accept": "application/json",
        }
        payload = {
            "model": "meta/llama-3.2-90b-vision-instruct",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt_text},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_b64}"}},
                    ],
                }
            ],
            "max_tokens": 512,
            "temperature": 1.0,
            "top_p": 1.0,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0,
            "stream": False,
        }
        
        async with httpx.AsyncClient(timeout=120.0) as client:
            resp = await client.post(NVIDIA_INTEGRATE_URL, headers=headers, json=payload)
            resp.raise_for_status()
            data = resp.json()
            if "choices" in data and data["choices"]:
                return data["choices"][0]["message"]["content"]
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ NVIDIA API: {e}")
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"


async def save_cropped_image_shared(image_b64: str, image_id: int, fragment_index: int, label: str, client: httpx.AsyncClient) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3 (—á–µ—Ä–µ–∑ Backend1 API) –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â–∏–π HTTP –∫–ª–∏–µ–Ω—Ç
    """
    try:
        import base64
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
        image_bytes = base64.b64decode(image_b64)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"fragment_{image_id}_{fragment_index}_{label}.jpg"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Backend1 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ S3
        files = {
            "file": (filename, image_bytes, "image/jpeg")
        }
        data = {
            "folder": "fragments"
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π endpoint Backend1 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        response = await client.post(
            f"{settings.backend1_url}/api/v1/images/internal/save-fragment",
            files=files,
            data=data
        )
        
        if response.status_code == 200:
            result = response.json()
            return result.get("s3_url", filename)
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {response.status_code}")
            return filename
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {e}")
        return f"fragment_{image_id}_{fragment_index}_{label}.jpg"


async def save_cropped_image(image_b64: str, image_id: int, fragment_index: int, label: str) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ S3 (—á–µ—Ä–µ–∑ Backend1 API) (legacy –≤–µ—Ä—Å–∏—è)
    """
    try:
        import base64
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
        image_bytes = base64.b64decode(image_b64)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"fragment_{image_id}_{fragment_index}_{label}.jpg"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Backend1 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ S3
        async with httpx.AsyncClient(timeout=30.0) as client:
            files = {
                "file": (filename, image_bytes, "image/jpeg")
            }
            data = {
                "folder": "fragments"
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π endpoint Backend1 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            response = await client.post(
                f"{settings.backend1_url}/api/v1/images/internal/save-fragment",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get("s3_url", filename)
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç: {response.status_code}")
                return filename
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {e}")
        return f"fragment_{image_id}_{fragment_index}_{label}.jpg"


async def call_nvidia_api_by_url(image_url: str) -> str:
    # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä
    prompt_text = get_prompt_text()
    headers = {
        "Authorization": f"Bearer {settings.nvidia_api_key}" if settings.nvidia_api_key else "",
        "Accept": "application/json",
    }
    payload = {
        "model": "meta/llama-3.2-90b-vision-instruct",
        "messages": [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt_text},
                    {"type": "image_url", "image_url": {"url": image_url}},
                ],
            }
        ],
        "max_tokens": 1024,
        "temperature": 1.0,
        "top_p": 1.0,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "stream": False,
    }
    async with httpx.AsyncClient(timeout=120.0) as client:
        resp = await client.post(NVIDIA_INTEGRATE_URL, headers=headers, json=payload)
        resp.raise_for_status()
        data = resp.json()
        if "choices" in data and data["choices"]:
            return data["choices"][0]["message"]["content"]
        return ""


@app.get("/")
async def root():
    return {
        "message": "Image describer API",
        "version": "1.0.0",
        "endpoints": {
            "analyze_image_url": "/analyze-image-url",
            "analyze_image_upload": "/analyze-image-upload",
            "health": "/health",
        },
    }


@app.post("/analyze-image-url", response_model=ImageAnalysisResponse)
async def analyze_image_by_url(request: ImageAnalysisRequest):
    if not request.image_url:
        raise HTTPException(status_code=400, detail="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    try:
        text = await call_nvidia_api_by_url(request.image_url)
        return ImageAnalysisResponse(success=True, result=text)
    except httpx.HTTPError as e:
        return ImageAnalysisResponse(success=False, result="", error=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ NVIDIA API: {str(e)}")
    except Exception as e:
        return ImageAnalysisResponse(success=False, result="", error=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.post("/analyze-image-upload", response_model=ImageAnalysisResponse)
async def analyze_uploaded_image(
    file: UploadFile = File(...),
    text_prompt: str = Form("–û–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"),
    max_tokens: int = Form(512),
    temperature: float = Form(1.0),
):
    if not file.content_type or not file.content_type.startswith("image/"):
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
    try:
        file_content = await file.read()
        image_b64 = base64.b64encode(file_content).decode()
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–∏—à–µ–¥—à–∏–π text_prompt
        prompt_text = get_prompt_text()

        headers = {
            "Authorization": f"Bearer {settings.nvidia_api_key}" if settings.nvidia_api_key else "",
            "Accept": "application/json",
        }
        payload = {
            "model": "meta/llama-3.2-90b-vision-instruct",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt_text},
                        {"type": "image_url", "image_url": {"url": f"data:{file.content_type};base64,{image_b64}"}},
                    ],
                }
            ],
            "max_tokens": max_tokens,
            "temperature": temperature,
            "top_p": 1.0,
            "frequency_penalty": 0.0,
            "presence_penalty": 0.0,
            "stream": False,
        }
        async with httpx.AsyncClient(timeout=60.0) as client:
            resp = await client.post(NVIDIA_INTEGRATE_URL, headers=headers, json=payload)
            resp.raise_for_status()
            data = resp.json()
            if "choices" in data and data["choices"]:
                return ImageAnalysisResponse(success=True, result=data["choices"][0]["message"]["content"])
            return ImageAnalysisResponse(success=False, result="", error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
    except httpx.HTTPError as e:
        return ImageAnalysisResponse(success=False, result="", error=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ NVIDIA API: {str(e)}")
    except Exception as e:
        return ImageAnalysisResponse(success=False, result="", error=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

