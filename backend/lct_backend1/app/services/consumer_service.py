"""
Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ RabbitMQ
"""
import asyncio
import json
import logging
import time
import aio_pika
from sqlalchemy.orm import Session

from app.core.config import settings
from app.core.database import SessionLocal
from app.services.image_service import ImageService

logger = logging.getLogger(__name__)


class ConsumerService:
    """–ö–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ RabbitMQ"""

    def __init__(self):
        self.amqp_url = settings.rabbitmq_url
        self.queue_descriptions = settings.rabbitmq_queue_image_descriptions
        self.image_service = ImageService()

    async def start_consumer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Å—å—é–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        connection: aio_pika.abc.AbstractRobustConnection = await aio_pika.connect_robust(self.amqp_url)
        try:
            channel = await connection.channel()
            await channel.set_qos(prefetch_count=10)

            # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –æ—Ç Backend3
            queue = await channel.declare_queue(self.queue_descriptions, durable=True)

            async with queue.iterator() as queue_iter:
                async for message in queue_iter:
                    async with message.process():
                        try:
                            start_time = time.time()
                            payload = json.loads(message.body.decode("utf-8"))
                            image_id = payload.get('image_id')
                            obj_count = len(payload.get('detected_objects', []))
                            
                            logger.info(f"üì• Backend1: –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è image_id={image_id} ({obj_count} –æ–±—ä–µ–∫—Ç–æ–≤)")
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            with SessionLocal() as db:
                                await self.image_service.process_description_result(db, payload)
                            
                            elapsed = time.time() - start_time
                            logger.info(f"‚úÖ Backend1: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è image_id={image_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞ {elapsed:.2f}s")
                                
                        except Exception as e:
                            logger.exception(f"‚ùå Backend1: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        finally:
            await connection.close()

    async def ensure_queues(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ—á–µ—Ä–µ–¥–∏"""
        connection: aio_pika.abc.AbstractRobustConnection = await aio_pika.connect_robust(self.amqp_url)
        try:
            channel = await connection.channel()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ—á–µ—Ä–µ–¥–∏
            await channel.declare_queue(settings.rabbitmq_queue_image_tasks, durable=True)
            await channel.declare_queue(settings.rabbitmq_queue_image_results, durable=True)
            await channel.declare_queue(settings.rabbitmq_queue_image_descriptions, durable=True)
            
            logger.info("–í—Å–µ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ —Å–æ–∑–¥–∞–Ω—ã")
        finally:
            await connection.close()
