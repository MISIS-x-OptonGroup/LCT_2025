"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ backend_2 —Å –∫–æ–Ω—Å—å—é–º–µ—Ä–æ–º RabbitMQ
"""
import asyncio
import io
import json
import logging
import os
import time
from typing import List

import aio_pika
from aio_pika import Message, DeliveryMode
from fastapi import FastAPI
import httpx
import numpy as np
from PIL import Image

from .core.config import settings
from .ML.ImageSegmentatator import ImageSegmentator

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Backend 2 - Image Processor", version="1.0.0")
segmentator = ImageSegmentator(
    _box_thr=0.10080074890084499,
    _text_thr=0.2693266367707789,
    _iou_thr=0.8527497557418572,
    _beta=0.9457256509335716,
    _alpha_all_classes=0.7412089719658128,
)

# –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
models_warmed_up = False


async def warmup_models() -> None:
    """
    –ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç ML –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞
    –í—ã–ø–æ–ª–Ω—è–µ—Ç dummy inference –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CUDA –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Å–æ–≤ –≤ –ø–∞–º—è—Ç—å GPU
    """
    global models_warmed_up
    
    if models_warmed_up:
        logger.info("–ú–æ–¥–µ–ª–∏ —É–∂–µ –ø—Ä–æ–≥—Ä–µ—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    try:
        logger.info("üî• –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–µ–π (GroundingDINO + SAM2)...")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º dummy –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
        dummy_image = np.zeros((640, 640, 3), dtype=np.uint8)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º dummy inference
        masks, boxes, labels, scores = segmentator.predict_with_array(dummy_image)
        
        elapsed = time.time() - start_time
        device = segmentator.device
        
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –ø—Ä–æ–≥—Ä–µ—Ç—ã –∑–∞ {elapsed:.2f}s –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device}")
        logger.info(f"   - –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(boxes)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 0 –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)")
        
        models_warmed_up = True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –º–æ–¥–µ–ª–µ–π: {e}")
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–≥—Ä–µ–≤–∞, –ø–µ—Ä–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–π")


async def start_consumer() -> None:
    connection: aio_pika.abc.AbstractRobustConnection = await aio_pika.connect_robust(settings.rabbitmq_url)
    channel = await connection.channel()
    await channel.set_qos(prefetch_count=10)

    queue = await channel.declare_queue(settings.rabbitmq_queue_image_tasks, durable=True)

    async with queue.iterator() as queue_iter:
        async for message in queue_iter:
            async with message.process():
                try:
                    start_time = time.time()
                    payload = json.loads(message.body.decode("utf-8"))
                    image_id = payload.get("image_id")
                    image_path = payload.get("image_path")
                    s3_url = payload.get("s3_url")

                    logger.info(f"üì• –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ image_id={image_id}")

                    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–±–æ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø—É—Ç–∏, –ª–∏–±–æ –ø–æ URL
                    download_start = time.time()
                    if image_path and os.path.exists(image_path):
                        img = Image.open(image_path).convert("RGB")
                        logger.info(f"   ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∑–∞ {time.time() - download_start:.2f}s")
                    elif s3_url:
                        async with httpx.AsyncClient(timeout=60.0) as client:
                            resp = await client.get(s3_url)
                            resp.raise_for_status()
                            img = Image.open(io.BytesIO(resp.content)).convert("RGB")
                            download_time = time.time() - download_start
                            size_mb = len(resp.content) / (1024 * 1024)
                            logger.info(f"   ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ S3: {size_mb:.2f} MB –∑–∞ {download_time:.2f}s")
                    else:
                        logger.error("‚ùå –ù–µ—Ç –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏, –Ω–∏ URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è; –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        continue

                    # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_rgb = np.array(img, dtype=np.uint8)
                    logger.info(f"   üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.size[0]}x{img.size[1]}")
                    
                    segment_start = time.time()
                    masks, boxes, labels, scores = segmentator.predict_with_array(image_rgb)
                    segment_time = time.time() - segment_start
                    logger.info(f"   ‚úì –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {segment_time:.2f}s, –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(boxes)}")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è Backend3
                    result = {
                        "image_id": image_id,
                        "image_url": s3_url,  # URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        "image_width": img.size[0],  # –®–∏—Ä–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        "image_height": img.size[1],  # –í—ã—Å–æ—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        "detected_objects": [
                            {
                                "bbox": box.tolist() if hasattr(box, 'tolist') else list(box),  # [x1, y1, x2, y2] –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
                                "label": label,
                                "confidence": float(score)
                            } for box, label, score in zip(boxes, labels, scores)
                        ],
                    }

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º detected_objects –≤ JSON-—Ñ–∞–π–ª (output.json)
                    try:
                        qq = result.get("detected_objects", [])
                        # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–æ–≤ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ description, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                        for obj in qq:
                            desc = obj.get("description")
                            if isinstance(desc, str):
                                s = desc.replace("\n", "").replace("  ", "")
                                try:
                                    obj["description"] = json.loads(s)
                                except Exception:
                                    pass
                        with open("output.json", "w", encoding="utf-8") as f:
                            json.dump(qq, f, ensure_ascii=False)
                    except Exception as e:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å output.json: %s", e)

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    result_body = json.dumps(result).encode("utf-8")
                    await channel.default_exchange.publish(
                        Message(
                            result_body,
                            content_type="application/json",
                            delivery_mode=DeliveryMode.PERSISTENT,
                        ),
                        routing_key=settings.rabbitmq_queue_image_results,
                    )
                    
                    total_time = time.time() - start_time
                    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ image_id={image_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f}s (–Ω–∞–π–¥–µ–Ω–æ {len(boxes)} –æ–±—ä–µ–∫—Ç–æ–≤)")
                    
                except Exception as e:
                    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è image_id={image_id}: %s", e)


@app.on_event("startup")
async def on_startup():
    # –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await warmup_models()
    # –ó–∞–ø—É—Å–∫–∞–µ–º consumer –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(start_consumer())


@app.get("/health")
async def health():
    return {
        "status": "ok",
        "models_warmed_up": models_warmed_up,
        "device": segmentator.device,
        "cuda_available": segmentator.device == "cuda"
    }


