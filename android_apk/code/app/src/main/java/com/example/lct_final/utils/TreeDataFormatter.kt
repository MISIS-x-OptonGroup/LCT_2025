package com.example.lct_final.utils

import com.example.lct_final.api.Condition
import com.example.lct_final.api.DiseaseOrPest
import com.example.lct_final.api.Risk

object TreeDataFormatter {
    
    fun formatDiseases(diseases: List<DiseaseOrPest>, minLikelihood: Int = 10): String {
        val filteredDiseases = diseases.filter { (it.likelihood ?: 0) >= minLikelihood }
        if (filteredDiseases.isEmpty()) return ""
        
        return filteredDiseases.joinToString("\n") { disease ->
            val name = disease.nameRu ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            val likelihood = disease.likelihood ?: 0
            val typeStr = if (!disease.type.isNullOrEmpty()) " [${disease.type}]" else ""
            val severityStr = when (disease.severity?.lowercase()) {
                "low" -> "–ª–µ–≥–∫–∞—è"
                "medium" -> "—Å—Ä–µ–¥–Ω—è—è"
                "high" -> "—Ç—è–∂–µ–ª–∞—è"
                else -> disease.severity
            }
            val severityInfo = if (severityStr != null) " - $severityStr" else ""
            val evidence = if (!disease.evidence.isNullOrEmpty()) {
                "\n  –ü—Ä–∏–∑–Ω–∞–∫–∏: ${disease.evidence.joinToString(", ")}"
            } else ""
            "‚Ä¢ $name$typeStr ($likelihood%)$severityInfo$evidence"
        }
    }
    
    fun formatPests(pests: List<DiseaseOrPest>, minLikelihood: Int = 10): String {
        val filteredPests = pests.filter { (it.likelihood ?: 0) >= minLikelihood }
        if (filteredPests.isEmpty()) return ""
        
        return filteredPests.joinToString("\n") { pest ->
            val name = pest.nameRu ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            val likelihood = pest.likelihood ?: 0
            val typeStr = if (!pest.type.isNullOrEmpty()) " [${pest.type}]" else ""
            val severityStr = when (pest.severity?.lowercase()) {
                "low" -> "–ª–µ–≥–∫–∞—è"
                "medium" -> "—Å—Ä–µ–¥–Ω—è—è"
                "high" -> "—Ç—è–∂–µ–ª–∞—è"
                else -> pest.severity
            }
            val severityInfo = if (severityStr != null) " - $severityStr" else ""
            val evidence = if (!pest.evidence.isNullOrEmpty()) {
                "\n  –ü—Ä–∏–∑–Ω–∞–∫–∏: ${pest.evidence.joinToString(", ")}"
            } else ""
            "‚Ä¢ $name$typeStr ($likelihood%)$severityInfo$evidence"
        }
    }
    
    fun formatCondition(condition: Condition): String {
        val conditionItems = mutableListOf<String>()
        
        // –°—Ç–∞—Ç—É—Å –¥–µ—Ä–µ–≤–∞
        condition.treeStatus?.let { status ->
            val statusRu = when (status.lowercase()) {
                "alive" -> "–ñ–∏–≤–æ–µ"
                "dead" -> "–ú–µ—Ä—Ç–≤–æ–µ"
                "dying" -> "–£—Å—ã—Ö–∞—é—â–µ–µ"
                else -> status
            }
            conditionItems.add("–°—Ç–∞—Ç—É—Å: $statusRu")
        }
        
        // –ù–∞–∫–ª–æ–Ω
        condition.leaning?.let { leaning ->
            if (leaning.present == true && (leaning.angle ?: 0) > 0) {
                val confidence = leaning.confidence?.let { " (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: $it%)" } ?: ""
                conditionItems.add("–ù–∞–∫–ª–æ–Ω: ${leaning.angle}¬∞$confidence")
            }
        }
        
        condition.dryBranchesPct?.let { pct ->
            if (pct > 0) conditionItems.add("–°—É—Ö–∏–µ –≤–µ—Ç–∫–∏: $pct%")
        }
        
        if (condition.trunkDecay?.present == true) {
            val confidence = condition.trunkDecay.confidence?.let { " ($it%)" } ?: ""
            val evidence = if (!condition.trunkDecay.evidence.isNullOrEmpty()) {
                " - ${condition.trunkDecay.evidence.joinToString(", ")}"
            } else ""
            conditionItems.add("–ì–Ω–∏–ª—å —Å—Ç–≤–æ–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞$confidence$evidence")
        }
        if (condition.cavities?.present == true) {
            val confidence = condition.cavities.confidence?.let { " ($it%)" } ?: ""
            val locations = if (!condition.cavities.locations.isNullOrEmpty()) {
                " [${condition.cavities.locations.joinToString(", ")}]"
            } else ""
            conditionItems.add("–î—É–ø–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã$locations$confidence")
        }
        if (condition.cracks?.present == true) {
            val confidence = condition.cracks.confidence?.let { " ($it%)" } ?: ""
            val locations = if (!condition.cracks.locations.isNullOrEmpty()) {
                " [${condition.cracks.locations.joinToString(", ")}]"
            } else ""
            conditionItems.add("–¢—Ä–µ—â–∏–Ω—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã$locations$confidence")
        }
        if (condition.barkDetachment?.present == true) {
            val confidence = condition.barkDetachment.confidence?.let { " ($it%)" } ?: ""
            val locations = if (!condition.barkDetachment.locations.isNullOrEmpty()) {
                " [${condition.barkDetachment.locations.joinToString(", ")}]"
            } else ""
            conditionItems.add("–û—Ç—Å–ª–æ–µ–Ω–∏–µ –∫–æ—Ä—ã$locations$confidence")
        }
        if (condition.trunkDamage?.present == true) {
            val confidence = condition.trunkDamage.confidence?.let { " ($it%)" } ?: ""
            val evidence = if (!condition.trunkDamage.evidence.isNullOrEmpty()) {
                " - ${condition.trunkDamage.evidence.joinToString(", ")}"
            } else ""
            conditionItems.add("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Å—Ç–≤–æ–ª–∞$confidence$evidence")
        }
        if (condition.crownDamage?.present == true) {
            val confidence = condition.crownDamage.confidence?.let { " ($it%)" } ?: ""
            val evidence = if (!condition.crownDamage.evidence.isNullOrEmpty()) {
                " - ${condition.crownDamage.evidence.joinToString(", ")}"
            } else ""
            conditionItems.add("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∫—Ä–æ–Ω—ã$confidence$evidence")
        }
        if (condition.fruitingBodies?.present == true) {
            val confidence = condition.fruitingBodies.confidence?.let { " ($it%)" } ?: ""
            val evidence = if (!condition.fruitingBodies.evidence.isNullOrEmpty()) {
                " - ${condition.fruitingBodies.evidence.joinToString(", ")}"
            } else ""
            conditionItems.add("–ü–ª–æ–¥–æ–≤—ã–µ —Ç–µ–ª–∞ –≥—Ä–∏–±–æ–≤$confidence$evidence")
        }
        if (condition.rootDamage?.present == true) {
            val confidence = condition.rootDamage.confidence?.let { " ($it%)" } ?: ""
            val evidence = if (!condition.rootDamage.evidence.isNullOrEmpty()) {
                " - ${condition.rootDamage.evidence.joinToString(", ")}"
            } else ""
            conditionItems.add("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π$confidence$evidence")
        }
        if (condition.rootCollarDecay?.present == true) {
            val confidence = condition.rootCollarDecay.confidence?.let { " ($it%)" } ?: ""
            val evidence = if (!condition.rootCollarDecay.evidence.isNullOrEmpty()) {
                " - ${condition.rootCollarDecay.evidence.joinToString(", ")}"
            } else ""
            conditionItems.add("–ì–Ω–∏–ª—å –∫–æ—Ä–Ω–µ–≤–æ–π —à–µ–π–∫–∏$confidence$evidence")
        }
        
        // –î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (!condition.other.isNullOrEmpty()) {
            conditionItems.add("–î—Ä—É–≥–æ–µ: ${condition.other.joinToString(", ")}")
        }
        
        return if (conditionItems.isNotEmpty()) {
            conditionItems.joinToString("\n‚Ä¢ ", "‚Ä¢ ")
        } else ""
    }
    
    fun formatRisk(risk: Risk): Pair<String, String> {
        val riskEmoji = when (risk.level?.lowercase()) {
            "low" -> "‚úÖ"
            "medium" -> "‚ö†Ô∏è"
            "high" -> "üö®"
            else -> "‚ÑπÔ∏è"
        }
        val riskLevel = when (risk.level?.lowercase()) {
            "low" -> "–ù–∏–∑–∫–∏–π"
            "medium" -> "–°—Ä–µ–¥–Ω–∏–π"
            "high" -> "–í—ã—Å–æ–∫–∏–π"
            else -> risk.level ?: ""
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Ä–∏—Å–∫–µ
        val imminentWarning = if (risk.imminentFailureRisk == true) " üö® –ö–†–ò–¢–ò–ß–ù–û!" else ""
        val riskText = "$riskEmoji –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: $riskLevel$imminentWarning"
        
        val driversText = buildString {
            if (risk.imminentFailureRisk == true) {
                append("‚ö†Ô∏è –†–ò–°–ö –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ì–û –ü–ê–î–ï–ù–ò–Ø!\n")
            }
            if (!risk.drivers.isNullOrEmpty()) {
                append(risk.drivers.joinToString("\n‚Ä¢ ", "‚Ä¢ "))
            }
        }
        
        return Pair(riskText, driversText)
    }
    
    fun getRiskColor(riskLevel: String?): Int {
        return when (riskLevel?.lowercase()) {
            "low" -> android.graphics.Color.parseColor("#81C784")
            "medium" -> android.graphics.Color.parseColor("#FFB74D")
            "high" -> android.graphics.Color.parseColor("#E57373")
            else -> android.graphics.Color.parseColor("#A0B8A0")
        }
    }
}

