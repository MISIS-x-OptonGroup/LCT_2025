package com.example.lct_final

import android.app.Activity
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import android.view.View
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import com.bumptech.glide.Glide
import com.example.lct_final.databinding.ActivityLiveProcessingBinding
import com.example.lct_final.api.ImageUploadManager
import com.example.lct_final.api.ImageDetailResponse
import kotlinx.coroutines.*
import java.text.SimpleDateFormat
import java.util.*

class LiveProcessingActivity : AppCompatActivity() {

    private lateinit var binding: ActivityLiveProcessingBinding
    private lateinit var imageUploadManager: ImageUploadManager
    private val processingScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private var currentImageDetail: ImageDetailResponse? = null
    private var currentPhotoUri: Uri? = null

    // Launcher –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
    private val pickImageLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            val uri = result.data?.data
            if (uri != null) {
                processPhoto(uri)
            } else {
                Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ", Toast.LENGTH_SHORT).show()
                finish()
            }
        } else {
            finish()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityLiveProcessingBinding.inflate(layoutInflater)
        setContentView(binding.root)

        imageUploadManager = ImageUploadManager(this)

        setupUI()

        // –ï—Å–ª–∏ Activity –∑–∞–ø—É—â–µ–Ω–∞ —Å URI, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        val photoUriString = intent.getStringExtra("photo_uri")
        if (photoUriString != null) {
            val uri = Uri.parse(photoUriString)
            processPhoto(uri)
        } else {
            // –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
            openGalleryPicker()
        }
    }

    private fun setupUI() {
        binding.closeButton.setOnClickListener {
            // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if (currentImageDetail != null) {
                val intent = Intent(this, RecentPhotosActivity::class.java)
                startActivity(intent)
            }
            finish()
        }

        binding.nextPhotoButton.setOnClickListener {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            it.animate()
                .scaleX(0.9f)
                .scaleY(0.9f)
                .setDuration(100)
                .withEndAction {
                    it.animate()
                        .scaleX(1f)
                        .scaleY(1f)
                        .setDuration(100)
                        .start()
                    openGalleryPicker()
                }
                .start()
        }

        binding.viewDetailsButton.setOnClickListener {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            it.animate()
                .scaleX(0.9f)
                .scaleY(0.9f)
                .setDuration(100)
                .withEndAction {
                    it.animate()
                        .scaleX(1f)
                        .scaleY(1f)
                        .setDuration(100)
                        .start()
                    currentImageDetail?.let { image ->
                        showDetailedResults(image)
                    }
                }
                .start()
        }
    }

    private fun openGalleryPicker() {
        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
        pickImageLauncher.launch(intent)
    }

    private fun processPhoto(uri: Uri) {
        currentPhotoUri = uri
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ç–æ
        Glide.with(this)
            .load(uri)
            .centerCrop()
            .into(binding.photoImageView)

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI
        resetUI()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processingScope.launch {
            try {
                // –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
                updateStatus("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")
                delay(500)

                // –®–∞–≥ 2: –°–±–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                updateStatus("–°–±–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
                val metadata = buildPhotoMetadata(uri)
                delay(500)

                // –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                updateStatus("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
                val uploadResult = imageUploadManager.uploadImage(uri, metadata)

                if (uploadResult.isFailure) {
                    val errorMsg = uploadResult.exceptionOrNull()?.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    showError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $errorMsg")
                    return@launch
                }

                val uploadResponse = uploadResult.getOrNull()!!
                updateStatus("‚úì –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (ID: ${uploadResponse.id})")
                delay(1000)

                // –®–∞–≥ 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                updateStatus("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                val processingResult = imageUploadManager.monitorProcessingStatus(
                    imageId = uploadResponse.id,
                    maxAttempts = 60, // 5 –º–∏–Ω—É—Ç
                    delayMillis = 5000 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                ) { imageDetail ->
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ UI
                    val status = when (imageDetail.processingStatus) {
                        "uploaded" -> "–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
                        "processing" -> "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
                        "completed" -> "‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                        else -> imageDetail.processingStatus
                    }
                    updateStatus(status)
                }

                if (processingResult.isFailure) {
                    showError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                    return@launch
                }

                val imageDetail = processingResult.getOrNull()!!
                currentImageDetail = imageDetail

                // –®–∞–≥ 5: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                showResults(imageDetail)

            } catch (e: Exception) {
                android.util.Log.e("LiveProcessingActivity", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", e)
                showError("–û—à–∏–±–∫–∞: ${e.message}")
            }
        }
    }

    private fun resetUI() {
        binding.statusText.text = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ..."
        binding.progressBar.isIndeterminate = true
        binding.progressBar.visibility = View.VISIBLE
        binding.resultsSection.visibility = View.GONE
        currentImageDetail = null
    }

    private fun updateStatus(status: String) {
        binding.statusText.text = status
    }

    private fun showResults(imageDetail: ImageDetailResponse) {
        binding.progressBar.visibility = View.GONE
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        binding.resultsSection.apply {
            alpha = 0f
            visibility = View.VISIBLE
            animate()
                .alpha(1f)
                .setDuration(500)
                .start()
        }

        val objectsCount = imageDetail.detectedObjects?.size ?: 0
        binding.objectsCountText.text = objectsCount.toString()

        if (objectsCount > 0) {
            val description = buildString {
                imageDetail.detectedObjects?.take(3)?.forEach { obj ->
                    append("‚Ä¢ ${obj.label.replaceFirstChar { it.uppercase() }}")
                    append(" (${(obj.confidence * 100).toInt()}%)\n")
                }
                if (objectsCount > 3) {
                    append("... –∏ –µ—â–µ ${objectsCount - 3}")
                }
            }
            binding.descriptionText.text = description
        } else {
            binding.descriptionText.text = "–û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        }

        updateStatus("‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        com.example.lct_final.api.ImageCache.clearCache()
        android.util.Log.d("LiveProcessingActivity", "üßπ –ö—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Toast —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        Toast.makeText(
            this, 
            "‚úì –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: $objectsCount", 
            Toast.LENGTH_SHORT
        ).show()
    }

    private fun showError(errorMessage: String) {
        binding.progressBar.visibility = View.GONE
        binding.statusText.text = "‚úó $errorMessage"
        
        Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show()
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ
        processingScope.launch {
            delay(3000)
            binding.nextPhotoButton.performClick()
        }
    }

    private suspend fun buildPhotoMetadata(uri: Uri): Map<String, String> {
        val metadata = mutableMapOf<String, String>()

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ MediaStore
        val projection = arrayOf(MediaStore.Images.Media.DATE_TAKEN)
        contentResolver.query(uri, projection, null, null, null)?.use { cursor ->
            if (cursor.moveToFirst()) {
                val dateTakenColumn = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_TAKEN)
                val dateTaken = cursor.getLong(dateTakenColumn)

                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å—ä–µ–º–∫–∏ –≤ ISO 8601 —Ñ–æ—Ä–º–∞—Ç–µ
                val dateFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.getDefault())
                dateFormat.timeZone = TimeZone.getTimeZone("UTC")
                metadata["taken_at"] = dateFormat.format(Date(dateTaken))
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ (–∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
        metadata["author"] = android.os.Build.MODEL

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ EXIF
        try {
            contentResolver.openInputStream(uri)?.use { input ->
                val exif = androidx.exifinterface.media.ExifInterface(input)
                val latLong = FloatArray(2)
                if (exif.getLatLong(latLong)) {
                    metadata["location"] = "${latLong[0]},${latLong[1]}"
                }
            }
        } catch (e: Exception) {
            android.util.Log.w("LiveProcessingActivity", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å GPS –∏–∑ EXIF", e)
        }

        return metadata
    }

    private fun showDetailedResults(image: ImageDetailResponse) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º RecentPhotosActivity —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        val intent = Intent(this, RecentPhotosActivity::class.java)
        intent.putExtra("scroll_to_id", image.id)
        startActivity(intent)
        finish()
    }

    override fun onResume() {
        super.onResume()
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        binding.photoCard.alpha = 0f
        binding.photoCard.scaleX = 0.8f
        binding.photoCard.scaleY = 0.8f
        binding.photoCard.animate()
            .alpha(1f)
            .scaleX(1f)
            .scaleY(1f)
            .setDuration(300)
            .start()
    }

    override fun onDestroy() {
        super.onDestroy()
        processingScope.cancel()
    }
}

